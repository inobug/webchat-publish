# Generated by Django 2.2.4 on 2019-11-26 01:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('pet_name', models.CharField(max_length=200, null=True, verbose_name='昵称')),
                ('phone', models.CharField(max_length=200, null=True, verbose_name='手机号')),
                ('email', models.CharField(max_length=200, null=True, verbose_name='邮箱')),
                ('avatar', models.FileField(default='avatars/default.png', upload_to='avatars/')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50, verbose_name='文章标题')),
                ('desc', models.CharField(max_length=255, verbose_name='文章描述')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('content', models.TextField()),
                ('comment_count', models.IntegerField(default=0)),
                ('up_count', models.IntegerField(default=0)),
                ('down_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=64, verbose_name='个人博客标题')),
                ('site_name', models.CharField(max_length=64, verbose_name='站点名称')),
                ('theme', models.CharField(max_length=32, verbose_name='博客主题')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('module_name', models.CharField(max_length=200, null=True, verbose_name='模块名')),
                ('moule_detail', models.CharField(max_length=200, null=True, verbose_name='模块信息')),
            ],
        ),
        migrations.CreateModel(
            name='WechatType',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('wechat_title', models.CharField(max_length=200, null=True, verbose_name='微信号标题')),
                ('module', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='wechat.Module', verbose_name='模块')),
            ],
        ),
        migrations.CreateModel(
            name='WechatDetail',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('publish_time', models.DateField(null=True, verbose_name='发布时间')),
                ('area', models.CharField(max_length=200, null=True, verbose_name='地区')),
                ('attention', models.IntegerField(null=True, verbose_name='关注度')),
                ('assess', models.IntegerField(null=True, verbose_name='评价度')),
                ('detail', models.CharField(max_length=1000, null=True, verbose_name='详情介绍')),
                ('head_img', models.CharField(max_length=1000, null=True, verbose_name='头像（路径）')),
                ('ocr_img', models.CharField(max_length=1000, null=True, verbose_name='二维码（路径）')),
                ('is_pay', models.CharField(max_length=200, null=True, verbose_name='是否缴费(1,0)')),
                ('pay_level', models.CharField(max_length=200, null=True, verbose_name='缴费级别')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wechat.WechatType', verbose_name='类别')),
            ],
        ),
        migrations.CreateModel(
            name='Tip',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('tip_name', models.CharField(max_length=200, null=True, verbose_name='标签名')),
                ('wechat', models.ManyToManyField(to='wechat.WechatDetail')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='标签名称')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wechat.Blog', verbose_name='所属博客')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='分类标题')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wechat.Blog', verbose_name='所属博客')),
            ],
        ),
        migrations.CreateModel(
            name='Article2Tag',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wechat.Article', verbose_name='文章')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wechat.Tag', verbose_name='标签')),
            ],
            options={
                'unique_together': {('article', 'tag')},
            },
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='wechat.Category'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(through='wechat.Article2Tag', to='wechat.Tag'),
        ),
        migrations.AddField(
            model_name='article',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
    ]
